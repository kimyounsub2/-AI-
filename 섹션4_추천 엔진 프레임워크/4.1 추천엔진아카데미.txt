1. creating a custom algorithm(사용자 정의 알고리즘 생성)
    implement an estimate function(견적 함수를 실행하다)

    Custom 추천 시스템 알고리즘의 모든 코드를 보자
    estimate함수는 세가지 인자를 갖는다.
    첫번째 인자로 self ->이는 파이썬 지향설계에 있는 모든 클래스에 첫 번째로 들어가는 인자이다. 
    이것은 현재 사용하고 있는 객체의 인스턴스를 지칭한다. 그래서 우리는 이 인스턴스와 관련된 변수들에 접근할 수 있다.
    두번째 인자로 사용자 ID와 세번째 인자인 항목 ID를 넣으면 SupriseLip 체계가 estimate 함수를 호출하면 넘겨준 사용자와 항목에 관한 평가를 예측하라는 호출이다.


    class MyOwbAlgrithm(AlgoBase):
        def__init__(self):
            AlgoBase.__init__(self)
            
        def estimate(self, user, item):
            return 3

2. building on top of surpriselib(서프라이즈셀리브 위에 건물을 짓는다.)
    EvaluatedAlgorithm이라는 새로운 클래스를 만든다. 이것은 SupriseLip의 알고리즘을 포함한다.
    하지만 Evaluate라는 새로운 함수를 가지고 RecommenderMetrics 라는 모든 매트릭을 알고리즘에 적용한다.
    그래서 이 클래스는 주어진 알고리즘의 정확성, 제공률, 다양성 등을 측정하기 쉽게 만든다

    EvaluatedAlgorithm(AlgoBase)
    algorithm: AlgoBase
    Evaluate(EvaluationData)

    RecommenderMetrics


    이제 추천 시스템을 다양한 방식으로 평가하기 위해 다양한 방식으로 훈련 데이터를 쪼개서 훈련데이터와 시험 데이터로 나눈다
    이것을 EvaluationData클래스라고 한다. 여기에는 우리가 가진 클래스의 Dataset인자가 필요한데 무비렌즈를 예시로
    생각해볼수 있다 그다음 EvaluatedAlgorithm에 필요한 훈련데이터와 시험데이터를 각각 만들어낸다

    EvaluationData(Dataset)
    GetTrainSet()
    GetTestSet()


----- 종합적으로 보면
일단 주어진 데이터 세트를 이용해서 EvaluationData의 인스턴스를 만들고 평가를 위해 그 데이터를 쪼갠 다음
EvaluatedAlgorithm객체로 알고리즘을 구성해서 같은 평가 데이터를 사용하는 여러 알고리즘을 시험해 볼수 있다. 
그런다음 우리는 Evaluate함수를 EvaluatedAlgorithm에 호출하고 이는 EvaluationData의를 넘겨서 알고리즘의 성능을 측정하게 해준다. 
